[33mcommit 0c8563e8d9e61cdb9c30ca865e4beea3bab878fd[m
Author: Eric <wrqatw@gmail.com>
Date:   Tue May 17 21:42:31 2016 +0800

    life 0x00

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..71a0f5d[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,218 @@[m
[32m+[m[32m#################[m[41m[m
[32m+[m[32m## Eclipse[m[41m[m
[32m+[m[32m#################[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m*.idea[m[41m[m
[32m+[m[32m*.pydevproject[m[41m[m
[32m+[m[32m.project[m[41m[m
[32m+[m[32m.metadata[m[41m[m
[32m+[m[32mbin/[m[41m[m
[32m+[m[32mtmp/[m[41m[m
[32m+[m[32m*.tmp[m[41m[m
[32m+[m[32m*.bak[m[41m[m
[32m+[m[32m*.swp[m[41m[m
[32m+[m[32m*~.nib[m[41m[m
[32m+[m[32mlocal.properties[m[41m[m
[32m+[m[32m.classpath[m[41m[m
[32m+[m[32m.settings/[m[41m[m
[32m+[m[32m.loadpath[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# External tool builders[m[41m[m
[32m+[m[32m.externalToolBuilders/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Locally stored "Eclipse launch configurations"[m[41m[m
[32m+[m[32m*.launch[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# CDT-specific[m[41m[m
[32m+[m[32m.cproject[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# PDT-specific[m[41m[m
[32m+[m[32m.buildpath[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#################[m[41m[m
[32m+[m[32m## Visual Studio[m[41m[m
[32m+[m[32m#################[m[41m[m
[32m+[m[41m[m
[32m+[m[32m## Ignore Visual Studio temporary files, build results, and[m[41m[m
[32m+[m[32m## files generated by popular Visual Studio add-ons.[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# User-specific files[m[41m[m
[32m+[m[32m*.suo[m[41m[m
[32m+[m[32m*.user[m[41m[m
[32m+[m[32m*.sln.docstates[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Build results[m[41m[m
[32m+[m[41m[m
[32m+[m[32m[Dd]ebug/[m[41m[m
[32m+[m[32m[Rr]elease/[m[41m[m
[32m+[m[32mx64/[m[41m[m
[32m+[m[32mbuild/[m[41m[m
[32m+[m[32m[Bb]in/[m[41m[m
[32m+[m[32m[Oo]bj/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# MSTest test Results[m[41m[m
[32m+[m[32m[Tt]est[Rr]esult*/[m[41m[m
[32m+[m[32m[Bb]uild[Ll]og.*[m[41m[m
[32m+[m[41m[m
[32m+[m[32m*_i.c[m[41m[m
[32m+[m[32m*_p.c[m[41m[m
[32m+[m[32m*.ilk[m[41m[m
[32m+[m[32m*.meta[m[41m[m
[32m+[m[32m*.obj[m[41m[m
[32m+[m[32m*.pch[m[41m[m
[32m+[m[32m*.pdb[m[41m[m
[32m+[m[32m*.pgc[m[41m[m
[32m+[m[32m*.pgd[m[41m[m
[32m+[m[32m*.rsp[m[41m[m
[32m+[m[32m*.sbr[m[41m[m
[32m+[m[32m*.tlb[m[41m[m
[32m+[m[32m*.tli[m[41m[m
[32m+[m[32m*.tlh[m[41m[m
[32m+[m[32m*.tmp[m[41m[m
[32m+[m[32m*.tmp_proj[m[41m[m
[32m+[m[32m*.log[m[41m[m
[32m+[m[32m*.vspscc[m[41m[m
[32m+[m[32m*.vssscc[m[41m[m
[32m+[m[32m.builds[m[41m[m
[32m+[m[32m*.pidb[m[41m[m
[32m+[m[32m*.log[m[41m[m
[32m+[m[32m*.scc[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Visual C++ cache files[m[41m[m
[32m+[m[32mipch/[m[41m[m
[32m+[m[32m*.aps[m[41m[m
[32m+[m[32m*.ncb[m[41m[m
[32m+[m[32m*.opensdf[m[41m[m
[32m+[m[32m*.sdf[m[41m[m
[32m+[m[32m*.cachefile[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Visual Studio profiler[m[41m[m
[32m+[m[32m*.psess[m[41m[m
[32m+[m[32m*.vsp[m[41m[m
[32m+[m[32m*.vspx[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Guidance Automation Toolkit[m[41m[m
[32m+[m[32m*.gpState[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# ReSharper is a .NET coding add-in[m[41m[m
[32m+[m[32m_ReSharper*/[m[41m[m
[32m+[m[32m*.[Rr]e[Ss]harper[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# TeamCity is a build add-in[m[41m[m
[32m+[m[32m_TeamCity*[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# DotCover is a Code Coverage Tool[m[41m[m
[32m+[m[32m*.dotCover[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# NCrunch[m[41m[m
[32m+[m[32m*.ncrunch*[m[41m[m
[32m+[m[32m.*crunch*.local.xml[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Installshield output folder[m[41m[m
[32m+[m[32m[Ee]xpress/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# DocProject is a documentation generator add-in[m[41m[m
[32m+[m[32mDocProject/buildhelp/[m[41m[m
[32m+[m[32mDocProject/Help/*.HxT[m[41m[m
[32m+[m[32mDocProject/Help/*.HxC[m[41m[m
[32m+[m[32mDocProject/Help/*.hhc[m[41m[m
[32m+[m[32mDocProject/Help/*.hhk[m[41m[m
[32m+[m[32mDocProject/Help/*.hhp[m[41m[m
[32m+[m[32mDocProject/Help/Html2[m[41m[m
[32m+[m[32mDocProject/Help/html[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Click-Once directory[m[41m[m
[32m+[m[32mpublish/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Publish Web Output[m[41m[m
[32m+[m[32m*.Publish.xml[m[41m[m
[32m+[m[32m*.pubxml[m[41m[m
[32m+[m[32m*.publishproj[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# NuGet Packages Directory[m[41m[m
[32m+[m[32m## TODO: If you have NuGet Package Restore enabled, uncomment the next line[m[41m[m
[32m+[m[32m#packages/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Windows Azure Build Output[m[41m[m
[32m+[m[32mcsx[m[41m[m
[32m+[m[32m*.build.csdef[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Windows Store app package directory[m[41m[m
[32m+[m[32mAppPackages/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Others[m[41m[m
[32m+[m[32msql/[m[41m[m
[32m+[m[32m*.Cache[m[41m[m
[32m+[m[32mClientBin/[m[41m[m
[32m+[m[32m[Ss]tyle[Cc]op.*[m[41m[m
[32m+[m[32m~$*[m[41m[m
[32m+[m[32m*~[m[41m[m
[32m+[m[32m*.dbmdl[m[41m[m
[32m+[m[32m*.[Pp]ublish.xml[m[41m[m
[32m+[m[32m*.pfx[m[41m[m
[32m+[m[32m*.publishsettings[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# RIA/Silverlight projects[m[41m[m
[32m+[m[32mGenerated_Code/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Backup & report files from converting an old project file to a newer[m[41m[m
[32m+[m[32m# Visual Studio version. Backup files are not needed, because we have git ;-)[m[41m[m
[32m+[m[32m_UpgradeReport_Files/[m[41m[m
[32m+[m[32mBackup*/[m[41m[m
[32m+[m[32mUpgradeLog*.XML[m[41m[m
[32m+[m[32mUpgradeLog*.htm[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# SQL Server files[m[41m[m
[32m+[m[32mApp_Data/*.mdf[m[41m[m
[32m+[m[32mApp_Data/*.ldf[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#############[m[41m[m
[32m+[m[32m## Windows detritus[m[41m[m
[32m+[m[32m#############[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Windows image file caches[m[41m[m
[32m+[m[32mThumbs.db[m[41m[m
[32m+[m[32mehthumbs.db[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Folder config file[m[41m[m
[32m+[m[32mDesktop.ini[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Recycle Bin used on file shares[m[41m[m
[32m+[m[32m$RECYCLE.BIN/[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Mac crap[m[41m[m
[32m+[m[32m.DS_Store[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#############[m[41m[m
[32m+[m[32m## Python[m[41m[m
[32m+[m[32m#############[m[41m[m
[32m+[m[41m[m
[32m+[m[32m*.py[cod][m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Packages[m[41m[m
[32m+[m[32m*.egg[m[41m[m
[32m+[m[32m*.egg-info[m[41m[m
[32m+[m[32mdist/[m[41m[m
[32m+[m[32mbuild/[m[41m[m
[32m+[m[32meggs/[m[41m[m
[32m+[m[32mparts/[m[41m[m
[32m+[m[32mvar/[m[41m[m
[32m+[m[32msdist/[m[41m[m
[32m+[m[32mdevelop-eggs/[m[41m[m
[32m+[m[32m.installed.cfg[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Installer logs[m[41m[m
[32m+[m[32mpip-log.txt[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Unit test / coverage reports[m[41m[m
[32m+[m[32m.coverage[m[41m[m
[32m+[m[32m.tox[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#Translations[m[41m[m
[32m+[m[32m*.mo[m[41m[m
[32m+[m[41m[m
[32m+[m[32m#Mr Developer[m[41m[m
[32m+[m[32m.mr.developer.cfg[m[41m[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..a7addb1[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m# Life is short, use Python[m
[32m+[m
[32m+[m[32mFor keeping codes written in Python[m
[32m+[m
[32m+[m
[1mdiff --git a/asyncio/asyncio_connect.py b/asyncio/asyncio_connect.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a915f21[m
[1m--- /dev/null[m
[1m+++ b/asyncio/asyncio_connect.py[m
[36m@@ -0,0 +1,29 @@[m
[32m+[m[32mimport asyncio[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@asyncio.coroutine[m[41m[m
[32m+[m[32mdef wget(host):[m[41m[m
[32m+[m[32m    print('wget %s...' % host)[m[41m[m
[32m+[m[32m    connect = asyncio.open_connection(host, 80)[m[41m[m
[32m+[m[32m    reader, writer = yield from connect[m[41m[m
[32m+[m[32m    # print(reader,writer)[m[41m[m
[32m+[m[32m    header = 'GET / HTTP/1.0\r\nHost: %s\r\n\r\n' % host[m[41m[m
[32m+[m[32m    writer.write(header.encode('utf-8'))[m[41m[m
[32m+[m[32m    yield from writer.drain()[m[41m[m
[32m+[m[32m    while True:[m[41m[m
[32m+[m[32m        line = yield from reader.readline()[m[41m[m
[32m+[m[32m        if line == b'\r\n':[m[41m[m
[32m+[m[32m            break[m[41m[m
[32m+[m[32m        print('%s header > %s' % (host, line.decode('utf-8').rstrip()))[m[41m[m
[32m+[m[32m    # Ignore the body, close the socket[m[41m[m
[32m+[m[32m    writer.close()[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mloop = asyncio.get_event_loop()[m[41m[m
[32m+[m[32mtasks = [wget(host) for host in ['www.sina.com.cn',[m[41m[m
[32m+[m[32m                                 'www.sohu.com',[m[41m[m
[32m+[m[32m                                 'www.163.com',[m[41m[m
[32m+[m[32m                                 'www.google.com',[m[41m[m
[32m+[m[32m                                 'www.youtube.com']][m[41m[m
[32m+[m[32mloop.run_until_complete(asyncio.wait(tasks))[m[41m[m
[32m+[m[32mloop.close()[m[41m[m
[1mdiff --git a/asyncio/asyncio_helloworld.py b/asyncio/asyncio_helloworld.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1c69aeb[m
[1m--- /dev/null[m
[1m+++ b/asyncio/asyncio_helloworld.py[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mimport asyncio[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@asyncio.coroutine[m[41m[m
[32m+[m[32mdef hello():[m[41m[m
[32m+[m[32m    print("Hello world!")[m[41m[m
[32m+[m[32m    # 异步调用asyncio.sleep(1):[m[41m[m
[32m+[m[32m    r = yield from asyncio.sleep(3)[m[41m[m
[32m+[m[32m    print("Hello world again!")[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# 获取EventLoop:[m[41m[m
[32m+[m[32mloop = asyncio.get_event_loop()[m[41m[m
[32m+[m[32m# 执行coroutine[m[41m[m
[32m+[m[32mloop.run_until_complete(hello())[m[41m[m
[32m+[m[32m# loop.close()[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint('---------------')[m[41m[m
[32m+[m[41m[m
[32m+[m[32mimport threading[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@asyncio.coroutine[m[41m[m
[32m+[m[32mdef hello():[m[41m[m
[32m+[m[32m    print('Hello world! (%s)' % threading.currentThread())[m[41m[m
[32m+[m[32m    yield from asyncio.sleep(3)[m[41m[m
[32m+[m[32m    print('Hello again! (%s)' % threading.currentThread())[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mloop = asyncio.get_event_loop()[m[41m[m
[32m+[m[32mtasks = [hello(), hello()][m[41m[m
[32m+[m[32mloop.run_until_complete(asyncio.wait(tasks))[m[41m[m
[32m+[m[32mloop.close()[m[41m[m
[1mdiff --git a/decorators/decorator_basic.py b/decorators/decorator_basic.py[m
[1mnew file mode 100644[m
[1mindex 0000000..b0ec41c[m
[1m--- /dev/null[m
[1m+++ b/decorators/decorator_basic.py[m
[36m@@ -0,0 +1,35 @@[m
[32m+[m[32mdef mark_bold(fn):[m[41m[m
[32m+[m[32m    def wrapped():[m[41m[m
[32m+[m[32m        return "<b>" + fn() + "</b>"[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return wrapped[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef mark_italic(fn):[m[41m[m
[32m+[m[32m    def wrapped():[m[41m[m
[32m+[m[32m        return "<i>" + fn() + "</i>"[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return wrapped[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@mark_bold[m[41m[m
[32m+[m[32m@mark_italic[m[41m[m
[32m+[m[32mdef hello():[m[41m[m
[32m+[m[32m    return "hello dumb decorators"[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# print(hello())[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# returns "<b><i>hello dumb decorators</i></b>"[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef decorate(fn):[m[41m[m
[32m+[m[32m    print('111')[m[41m[m
[32m+[m[32m    fn()[m[41m[m
[32m+[m[32m    print('333')[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@decorate[m[41m[m
[32m+[m[32mdef hahhah():[m[41m[m
[32m+[m[32m    print('222')[m[41m[m
[1mdiff --git a/decorators/decorator_classd.py b/decorators/decorator_classd.py[m
[1mnew file mode 100644[m
[1mindex 0000000..acfa070[m
[1m--- /dev/null[m
[1m+++ b/decorators/decorator_classd.py[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mclass ClassDecorator:[m[41m[m
[32m+[m[32m    def __init__(self, func):[m[41m[m
[32m+[m[32m        print('__init__: Initialize ClassDecorator')[m[41m[m
[32m+[m[32m        self.func = func[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def __call__(self):[m[41m[m
[32m+[m[32m        print('__call__: Call function')[m[41m[m
[32m+[m[32m        self.func()[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@ClassDecorator[m[41m[m
[32m+[m[32mdef func():[m[41m[m
[32m+[m[32m    print('I\'m a function, Come on Decorate me !')[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mfunc()[m[41m[m
[32m+[m[32mprint('Finish decorate func')[m[41m[m
[32m+[m[32m# >>> __init__: Initialize ClassDecorator[m[41m[m
[32m+[m[32m# >>> __call__: Call function[m[41m[m
[32m+[m[32m# >>> I'm a function, Come on Decorate me ![m[41m[m
[32m+[m[32m# >>> Finish decorate func[m[41m[m
[1mdiff --git a/decorators/decorator_makehtml.py b/decorators/decorator_makehtml.py[m
[1mnew file mode 100644[m
[1mindex 0000000..8846933[m
[1m--- /dev/null[m
[1m+++ b/decorators/decorator_makehtml.py[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mclass MakeHtmlTagClass(object):[m[41m[m
[32m+[m[32m    def __init__(self, tag, css_class=""):[m[41m[m
[32m+[m[32m        self._tag = tag[m[41m[m
[32m+[m[32m        self._css_class = " class='{0}'".format(css_class) \[m[41m[m
[32m+[m[32m            if css_class != "" else ""[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def __call__(self, fn):[m[41m[m
[32m+[m[32m        def wrapped(*args, **kwargs):[m[41m[m
[32m+[m[32m            return "<" + self._tag + self._css_class + ">\n" \[m[41m[m
[32m+[m[32m                   + fn(*args, **kwargs) + "\n</" + self._tag + ">"[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        return wrapped[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m@MakeHtmlTagClass(tag="b", css_class="bold_css")[m[41m[m
[32m+[m[32m@MakeHtmlTagClass(tag="i", css_class="italic_css")[m[41m[m
[32m+[m[32mdef hello(name):[m[41m[m
[32m+[m[32m    return "Hello Be Html: {}".format(name)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint(hello(" HAH "))[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# >>> <b class='bold_css'>[m[41m[m
[32m+[m[32m#     <i class='italic_css'>[m[41m[m
[32m+[m[32m#     Hello Be Html:  HAH[m[41m [m
[32m+[m[32m#     </i>[m[41m[m
[32m+[m[32m#     </b>[m[41m[m
[1mdiff --git a/decorators/decorators.py b/decorators/decorators.py[m
[1mnew file mode 100644[m
[1mindex 0000000..4ef0133[m
[1m--- /dev/null[m
[1m+++ b/decorators/decorators.py[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mimport signal, functools[m[41m[m
[32m+[m[32mimport time[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass TimeoutError(Exception):[m[41m[m
[32m+[m[32m    pass[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef timeout(seconds, msg='Time out!'):[m[41m[m
[32m+[m[32m    def decorated(func):[m[41m[m
[32m+[m[32m        def _handel_timeout(signum, frame):[m[41m[m
[32m+[m[32m            raise TimeoutError(msg)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        def wrapper(*args, **kwargs):[m[41m[m
[32m+[m[32m            signal.signal(signal.SIGALRM, _handel_timeout)[m[41m[m
[32m+[m[32m            signal.alarm(seconds)[m[41m[m
[32m+[m[32m            try:[m[41m[m
[32m+[m[32m                result = func(*args, **kwargs)[m[41m[m
[32m+[m[32m            finally:[m[41m[m
[32m+[m[32m                signal.alarm(0)[m[41m[m
[32m+[m[32m            return result[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        return functools.wraps(func)(wrapper)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return decorated[m[41m[m
[1mdiff --git a/decorators/mytimeit.py b/decorators/mytimeit.py[m
[1mnew file mode 100644[m
[1mindex 0000000..faa7e9b[m
[1m--- /dev/null[m
[1m+++ b/decorators/mytimeit.py[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32mfrom functools import wraps[m
[32m+[m[32mimport time[m
[32m+[m
[32m+[m
[32m+[m[32mdef timeit(f):[m
[32m+[m[32m    @wraps(f)[m
[32m+[m[32m    def wrap(*args, **kw):[m
[32m+[m[32m        ts = time.time()[m
[32m+[m[32m        result = f(*args, **kw)[m
[32m+[m[32m        te = time.time()[m
[32m+[m[32m        print('func:%r took: %2.4f sec' % (f.__name__, te - ts))[m
[32m+[m[32m        return result[m
[32m+[m
[32m+[m[32m    return wrap[m
[1mdiff --git a/foos/attack_defender_game.py b/foos/attack_defender_game.py[m
[1mnew file mode 100644[m
[1mindex 0000000..ef3d34c[m
[1m--- /dev/null[m
[1m+++ b/foos/attack_defender_game.py[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32m# attack_defender_game.py[m
[32m+[m
[32m+[m
[32m+[m[32mclass GameOver(BaseException):[m
[32m+[m[32m    pass[m
[32m+[m
[32m+[m
[32m+[m[32mclass Player:[m
[32m+[m[32m    def __init__(self, name):[m
[32m+[m[32m        self.name = name[m
[32m+[m[32m        self.health = 30[m
[32m+[m[32m        self.position = None[m
[32m+[m[32m        self.state = 1[m
[32m+[m
[32m+[m[32m    def set_block(self, position):[m
[32m+[m[32m        if self.state == -1:[m
[32m+[m[32m            raise GameOver[m
[32m+[m[32m        self.position = position[m
[32m+[m
[32m+[m[32m    def attack(self, goal, position):[m
[32m+[m[32m        if self.state <= 0:[m
[32m+[m[32m            return[m
[32m+[m
[32m+[m[32m        if not isinstance(goal, Player):[m
[32m+[m[32m            raise AttributeError[m
[32m+[m
[32m+[m[32m        if position not in ('low', 'high'):[m
[32m+[m[32m            raise AttributeError[m
[32m+[m
[32m+[m[32m        if goal.health == 0:[m
[32m+[m[32m            goal.state = -1[m
[32m+[m[32m            print(goal.name + ' become a zombie')[m
[32m+[m[32m            return[m
[32m+[m
[32m+[m[32m        if position == goal.position:[m
[32m+[m[32m            pass[m
[32m+[m[32m        elif position == 'high':[m
[32m+[m[32m            goal.health -= 10[m
[32m+[m[32m        else:[m
[32m+[m[32m            goal.health -= 5[m
[32m+[m
[32m+[m[32m        if goal.position is None:[m
[32m+[m[32m            goal.health -= 5[m
[32m+[m
[32m+[m[32m        if goal.health <= 0:[m
[32m+[m[32m            goal.state = 0[m
[32m+[m[32m            goal.health = 0[m
[32m+[m[32m            print(goal.name + ' is dead')[m
[32m+[m
[32m+[m[32m        print(goal.name + str(goal.health))[m
[32m+[m[32m        goal.set_block(None)[m
[32m+[m
[32m+[m
[32m+[m[32mattacker = Player('小明')[m
[32m+[m[32mdefender = Player('老师')[m
[32m+[m
[32m+[m[32mfor i in range(10):[m
[32m+[m[32m    print('Round ' + str(i + 1))[m
[32m+[m[32m    defender.set_block('low')[m
[32m+[m[32m    attacker.attack(defender, 'high')[m
[32m+[m
[32m+[m[32m    attacker.set_block('low')[m
[32m+[m[32m    defender.attack(attacker, 'high')[m
[1mdiff --git a/foos/bs4_basic.py b/foos/bs4_basic.py[m
[1mnew file mode 100644[m
[1mindex 0000000..54f77b5[m
[1m--- /dev/null[m
[1m+++ b/foos/bs4_basic.py[m
[36m@@ -0,0 +1,36 @@[m
[32m+[m[32mfrom bs4 import BeautifulSoup as bs[m[41m[m
[32m+[m[32mimport requests, re[m[41m[m
[32m+[m[41m[m
[32m+[m[32mroot_url = 'https://www.sialparis.com'[m[41m[m
[32m+[m[32mfirst_url = 'https://www.sialparis.com/Exhibitors-list-SIAL-2014/Exhibitors-list/(page)/1'[m[41m[m
[32m+[m[41m[m
[32m+[m[32mr = requests.get(first_url)[m[41m[m
[32m+[m[32mrt = r.text[m[41m[m
[32m+[m[32msoup = bs(rt, 'html.parser')[m[41m[m
[32m+[m[41m[m
[32m+[m[32m##         <div class="esf-exhibitor-item" id="exhibitor_2044750">[m[41m[m
[32m+[m[32m##          <div class="esf-ei-image esf-ei-empty">[m[41m[m
[32m+[m[32m##          </div>[m[41m[m
[32m+[m[32m##          <div class="esf-ei-description">[m[41m[m
[32m+[m[32m##           <h4 class="esf-ei-title direct">[m[41m[m
[32m+[m[32m##            <a href="/Exhibitors-list-SIAL-2014/Exhibitors-list/A-a-Z-do-Cafe">[m[41m[m
[32m+[m[32m##             A a Z do Café[m[41m[m
[32m+[m[32m##            </a>[m[41m[m
[32m+[m[32m##           </h4>[m[41m[m
[32m+[m[32m##           <p class="esf-ei-country">[m[41m[m
[32m+[m[32m##            PORTUGAL[m[41m[m
[32m+[m[32m##           </p>[m[41m[m
[32m+[m[32m##           <p class="esf-ei-stand">[m[41m[m
[32m+[m[32m##            5A T 157[m[41m[m
[32m+[m[32m##           </p>[m[41m[m
[32m+[m[32m##          </div>[m[41m[m
[32m+[m[32m##         </div>[m[41m[m
[32m+[m[32mfor a in soup.find_all(href=re.compile(r'^/Exhibitors-list-SIAL-2014/Exhibitors-list/\w+')):[m[41m[m
[32m+[m[32m    print(root_url + a.get('href'))[m[41m[m
[32m+[m[41m[m
[32m+[m[32mr2 = requests.get('https://www.sialparis.com/Exhibitors-list-SIAL-2014/Exhibitors-list/GRANA-Ltd')[m[41m[m
[32m+[m[32mr2 = r2.text[m[41m[m
[32m+[m[32msoup2 = bs(r2, 'html.parser')[m[41m[m
[32m+[m[32m# print(soup2.prettify())[m[41m[m
[32m+[m[32msoup3 = soup2.find('div', class_='exhibitor-content')[m[41m[m
[32m+[m[32mprint(soup3.find('h2').get_text())[m[41m[m
[1mdiff --git a/foos/dwm_cv.py b/foos/dwm_cv.py[m
[1mnew file mode 100644[m
[1mindex 0000000..b293df3[m
[1m--- /dev/null[m
[1m+++ b/foos/dwm_cv.py[m
[36m@@ -0,0 +1,175 @@[m
[32m+[m[32m# /usr/bin/env python[m
[32m+[m[32m# -*- coding: utf-8 -*-[m
[32m+[m
[32m+[m[32mimport random[m
[32m+[m[32mimport re[m
[32m+[m
[32m+[m
[32m+[m[32mdef color(messages):[m
[32m+[m[32m    color = "\x1B[%d;%dm" % (1, random.randint(30, 37))[m
[32m+[m[32m    return "%s %s\x1B[0m" % (color, messages)[m
[32m+[m
[32m+[m
[32m+[m[32mdef colorprint(mes, flag=True):[m
[32m+[m[32m    def _mydecorator(func):[m
[32m+[m[32m        def _mydecorator(*args):[m
[32m+[m[32m            res = func(*args)[m
[32m+[m[32m            print[m
[32m+[m[32m            color(mes + ":"), "\n"[m
[32m+[m[32m            if flag:[m
[32m+[m[32m                for k1, v1 in res.items():[m
[32m+[m[32m                    if not isinstance(v1, dict):[m
[32m+[m[32m                        print[m
[32m+[m[32m                        "{0}: {1}".format(k1.rjust(16), v1)[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        print[m
[32m+[m[32m                        "{0}:".format(k1.rjust(16))[m
[32m+[m[32m                        for k2, v2 in v1.items():[m
[32m+[m[32m                            print[m
[32m+[m[32m                            "{0}: {1}".format(k2.rjust(20), v2)[m
[32m+[m[32m            else:[m
[32m+[m[32m                for i in res:[m
[32m+[m[32m                    if not isinstance(i[1], dict):[m
[32m+[m[32m                        print[m
[32m+[m[32m                        i[m
[32m+[m[32m                    else:[m
[32m+[m[32m                        for k, v in i[1].items():[m
[32m+[m[32m                            print[m
[32m+[m[32m                            "{0}[{1}]: {2}".format(k.rjust(16), \[m
[32m+[m[32m                                                   i[0], v)[m
[32m+[m[32m            return res[m
[32m+[m
[32m+[m[32m        return _mydecorator[m
[32m+[m
[32m+[m[32m    return _mydecorator[m
[32m+[m
[32m+[m
[32m+[m[32mclass ForJob(object):[m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        return color("XXX的python简历".center(400))[m
[32m+[m
[32m+[m[32m    @property[m
[32m+[m[32m    @colorprint("个人信息")[m
[32m+[m[32m    def personal_information(self):[m
[32m+[m[32m        return {[m
[32m+[m[32m            "Name": "XXX",[m
[32m+[m[32m            "Gender": "Male",[m
[32m+[m[32m            "Born": ['19XX', 'X', 'X'],[m
[32m+[m[32m            "Education": {[m
[32m+[m[32m                "School Name": "保定科技职业学院",[m
[32m+[m[32m                "Major": "烹饪工艺与营养",[m
[32m+[m[32m                "Degree": "Three-year college",[m
[32m+[m[32m                "Graduation": 2009},[m
[32m+[m[32m            "QQ": 61966225,[m
[32m+[m[32m            "Tel": 13552651322,[m
[32m+[m[32m            "Email": "ciici1234@hotmail.com",[m
[32m+[m[32m            "Target Positions": re.compile("'Python Developer'|Architect|DevOps", re.I | re.M).pattern}[m
[32m+[m
[32m+[m[32m    @property[m
[32m+[m[32m    @colorprint("个人特点")[m
[32m+[m[32m    def characteristics(self):[m
[32m+[m[32m        return {[m
[32m+[m[32m            "心里承受能力强": "从非计算机专业―思科方向\[m
[32m+[m[32m―linux运维―C/python开发",[m
[32m+[m[32m            "对计算机技术的热衷和喜爱": "正是因为喜欢IT,\[m
[32m+[m[32m我才会放弃大学专业",[m
[32m+[m[32m            "自学能力强": "没有大学的计算机基础除思科参加培训，\[m
[32m+[m[32m其它都为都是自学",[m
[32m+[m[32m            "毅力和耐性": "从不放弃一个解决不了的难题，\[m
[32m+[m[32m看过的计算机专业技术多于700页的书籍>30本",[m
[32m+[m[32m            "is_geek": True}[m
[32m+[m
[32m+[m[32m    @property[m
[32m+[m[32m    @colorprint("个人能力")[m
[32m+[m[32m    def skills(self):[m
[32m+[m[32m        return {[m
[32m+[m[32m            "Language": {[m
[32m+[m[32m                "熟悉": ["Python", "Ruby", "Bash", "c"],[m
[32m+[m[32m                "了解": ["Haskell", "Lisp", "Erlang"]},[m
[32m+[m[32m            "OS": ["Gentoo", "Debian", "Centos/Rhel", "Opensuse"],[m
[32m+[m[32m            "Tool": ["Vim", "Mercurial", "Git"],[m
[32m+[m[32m            "Databaseandtools": ["Mysql",[m
[32m+[m[32m                                 "Postgresql", "Mongodb", "Redis", "Memcached", "Sqlalchemy"],[m
[32m+[m[32m            "WebFramework": {[m
[32m+[m[32m                "熟悉": ["Tornado", "Django", "Gae"],[m
[32m+[m[32m                "了解": ["Flask"]},[m
[32m+[m[32m            "OtherFramework": ["Twisted", "gevent",[m
[32m+[m[32m                               "stackless", "scrapy", "mechanize"],[m
[32m+[m[32m            "GUI": "pyqt",[m
[32m+[m[32m            "Network": "Cisco Certified Security Professional",[m
[32m+[m[32m            "Other": "给gentoo和centos提交过bug"}[m
[32m+[m
[32m+[m[32m    @property[m
[32m+[m[32m    @colorprint("工作经验", False)[m
[32m+[m[32m    def work_experience(self):[m
[32m+[m[32m        return enumerate([[m
[32m+[m[32m            {[m
[32m+[m[32m                "Time period": "2009.09-2011.08",[m
[32m+[m[32m                "Company Name": "XXX（北京）科技股份有限公司",[m
[32m+[m[32m                "Position": "高级运维工程师"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Time period": "2011.09-2012.08",[m
[32m+[m[32m                "Company Name": "北京XXX有限责任公司",[m
[32m+[m[32m                "Position": "linux python研发工程师"}])[m
[32m+[m
[32m+[m[32m    @property[m
[32m+[m[32m    @colorprint("项目经验", False)[m
[32m+[m[32m    def project_experience(self):[m
[32m+[m[32m        return enumerate([[m
[32m+[m[32m            {[m
[32m+[m[32m                "Project": "kvm远程管理系统",[m
[32m+[m[32m                "Description": "前台(django)接手至其它同事并完成维护，\[m
[32m+[m[32m后台独立完成，用来创建，修改，删除kvm，查看状态信息等"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Project": "postfix群发邮件系统",[m
[32m+[m[32m                "Description": "前台(tornado),为其它部门提供发送邮件的web端, \[m
[32m+[m[32m并作为数据收集服务端,前后台独立完成"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Project": "windows个人安全终端系统",[m
[32m+[m[32m                "Description": "前后台和接收数据的socket服务器独立完成，\[m
[32m+[m[32m客户端图形编程使用qt"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Project": "地推(一个分布在全国的各个办事处的称呼:地面推广) \[m
[32m+[m[32mIDC质量测试系统",[m
[32m+[m[32m                "Description": "还在代码实现中,前台flask, \[m
[32m+[m[32m数据接收服务准备使用twisted,客户端为windows进程"}])[m
[32m+[m
[32m+[m[32m    @property[m
[32m+[m[32m    @colorprint("@Where", False)[m
[32m+[m[32m    def findme(self):[m
[32m+[m[32m        return enumerate([[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": "http://www.dongwm.com",[m
[32m+[m[32m                "Description": "个人技术博客"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": "http://www.zhihu.com/people/dongweiming",[m
[32m+[m[32m                "Description": "知乎"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": "http://www.quora.com/Weiming-Dong",[m
[32m+[m[32m                "Description": "Quora"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": r"https://twitter.com/#!/dongweiming",[m
[32m+[m[32m                "Description": "Twitter"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": "http://www.ailll.com",[m
[32m+[m[32m                "Description": "音乐分享网站"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": "http://dongwm.blog.51cto.com",[m
[32m+[m[32m                "Description": "51cto的推荐博客"},[m
[32m+[m[32m            {[m
[32m+[m[32m                "Link": "http://youhouer.appspot.com",[m
[32m+[m[32m                "Description": "基于Google App Engine的前端网站"}])[m
[32m+[m
[32m+[m[32m    def show(self):[m
[32m+[m[32m        prolist = [i for i in dir(self) if not i.startswith("_") \[m
[32m+[m[32m                   and not i.startswith("personal")][m
[32m+[m[32m        self.personal_information[m
[32m+[m[32m        for pro in prolist:[m
[32m+[m[32m            getattr(self, pro)[m
[32m+[m
[32m+[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    dongweiming = ForJob()[m
[32m+[m[32m    print[m
[32m+[m[32m    dongweiming[m
[32m+[m[32m    dongweiming.show()[m
[1mdiff --git a/foos/foo.py b/foos/foo.py[m
[1mnew file mode 100644[m
[1mindex 0000000..938926f[m
[1m--- /dev/null[m
[1m+++ b/foos/foo.py[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m# foo.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef foo(a, l, r):[m
[32m+[m[32m    if l < r:[m
[32m+[m[32m        foo(a, l + 1, r - 1)[m
[32m+[m[32m        a[l], a[r] = a[r], a[l][m
[32m+[m
[32m+[m
[32m+[m[32ma = [1, 2, 3, 4, 5, 6][m
[32m+[m
[32m+[m[32mfor x in range(6):[m
[32m+[m[32m    print(a[x])[m
[1mdiff --git a/foos/methods.py b/foos/methods.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1e2c7ab[m
[1m--- /dev/null[m
[1m+++ b/foos/methods.py[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32mclass A(object):[m
[32m+[m[32m    def foo(self, x):[m
[32m+[m[32m        print('executing foo(%s,%s)' % (self, x))[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def class_foo(cls, x):[m
[32m+[m[32m        print('executing class_foo(%s,%s)' % (cls, x))[m
[32m+[m
[32m+[m[32m    @staticmethod[m
[32m+[m[32m    def static_foo(x):[m
[32m+[m[32m        print('executing static_foo(%s)' % x)[m
[32m+[m
[32m+[m
[32m+[m[32ma = A()[m
[32m+[m[32ma.foo('a')[m
[32m+[m[32mprint('--------')[m
[32m+[m[32ma.class_foo('class')[m
[32m+[m[32mprint('--------')[m
[32m+[m[32ma.static_foo('static')[m
[1mdiff --git a/foos/os_file.py b/foos/os_file.py[m
[1mnew file mode 100644[m
[1mindex 0000000..416b8b2[m
[1m--- /dev/null[m
[1m+++ b/foos/os_file.py[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mimport os[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint(os.path.exists('.\\os_file.py'))[m[41m[m
[32m+[m[32mif not os.path.exists('.\\folder1\\'):[m[41m[m
[32m+[m[32m    os.mkdir('.\\folder1')[m[41m[m
[32m+[m[32mif not os.path.exists('.\\folder1\\folder2\\'):[m[41m[m
[32m+[m[32m    os.mkdir('.\\folder1\\folder2')[m[41m[m
[32m+[m[32m# .\\Images\\2ch\\2013-06-18-japan-neeter-than-ever[m[41m[m
[32m+[m[32mif not os.path.exists('.\\folder1\\2ch\\'):[m[41m[m
[32m+[m[32m    os.mkdir('.\\folder1\\2ch')[m[41m[m
[32m+[m[41m[m
[32m+[m[32mif not os.path.exists('.\\folder1\\2ch\\aa\\'):[m[41m[m
[32m+[m[32m    os.mkdir('.\\folder1\\2ch\\aa')[m[41m[m
[32m+[m[41m[m
[32m+[m[32mopen('.\\folder1\\ostest', 'w')[m[41m[m
[32m+[m[41m[m
[32m+[m[32mif not os.path.exists('.\\folder1\\ostest2'):[m[41m[m
[32m+[m[32m    open('.\\folder1\\ostest2', 'w')[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef list_dir(path):[m[41m[m
[32m+[m[32m    for d in os.listdir(path):[m[41m[m
[32m+[m[32m        dchild = os.path.join(path, d)[m[41m[m
[32m+[m[32m        if os.path.isdir(d):[m[41m[m
[32m+[m[32m            list_dir(d)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        return d[m[41m[m
[1mdiff --git a/foos/references_mark_num.py b/foos/references_mark_num.py[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/foos/show_args_kwargs.py b/foos/show_args_kwargs.py[m
[1mnew file mode 100644[m
[1mindex 0000000..79e2877[m
[1m--- /dev/null[m
[1m+++ b/foos/show_args_kwargs.py[m
[36m@@ -0,0 +1,19 @@[m
[32m+[m[32mdef show_args(*args):[m
[32m+[m[32m    print(args)[m
[32m+[m
[32m+[m
[32m+[m[32mdef show_kwargs(**kwargs):[m
[32m+[m[32m    print(kwargs)[m
[32m+[m
[32m+[m
[32m+[m[32mdef show_both(*args, **kwargs):[m
[32m+[m[32m    print(args, kwargs)[m
[32m+[m
[32m+[m
[32m+[m[32mif __name__ == '__main__':[m
[32m+[m[32m    show_args(1, '2', 'hello args', [1, 2, 'args'])[m
[32m+[m[32m    # (1, '2', 'hello args', [1, 2, 'args'])[m
[32m+[m[32m    show_kwargs(a=1, b='2', c='hello kwargs', d=[1, 2, 'kwargs'])[m
[32m+[m[32m    # {'b': '2', 'c': 'hello kwargs', 'd': [1, 2, 'kwargs'], 'a': 1}[m
[32m+[m[32m    show_both('hello args', [1, 2, 'args'], c='hello kwargs', d=[1, 2, 'kwargs'])[m
[32m+[m[32m# ('hello args', [1, 2, 'args']) {'c': 'hello kwargs', 'd': [1, 2, 'kwargs']}[m
[1mdiff --git a/generator/generator.py b/generator/generator.py[m
[1mnew file mode 100644[m
[1mindex 0000000..9ccce37[m
[1m--- /dev/null[m
[1m+++ b/generator/generator.py[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mmygenerator = (x * x for x in range(3))[m[41m[m
[32m+[m[41m[m
[32m+[m[32mfor i in mygenerator:[m[41m[m
[32m+[m[32m    print(i)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# >>> 0[m[41m[m
[32m+[m[32m#     1[m[41m[m
[32m+[m[32m#     4[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint(mygenerator)[m[41m[m
[32m+[m[32m# <generator object <genexpr> at 0x0000000002A5F480>[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint(0 in mygenerator)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# >>> False[m[41m[m
[1mdiff --git a/generator/generator_more.py b/generator/generator_more.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1870697[m
[1m--- /dev/null[m
[1m+++ b/generator/generator_more.py[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32mimport random[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef get_data():[m[41m[m
[32m+[m[32m    """返回0到9之间的3个随机数"""[m[41m[m
[32m+[m[32m    return random.sample(range(10), 3)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef consume():[m[41m[m
[32m+[m[32m    """显示每次传入的整数列表的动态平均值"""[m[41m[m
[32m+[m[32m    running_sum = 0[m[41m[m
[32m+[m[32m    data_items_seen = 0[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    while True:[m[41m[m
[32m+[m[32m        data = yield[m[41m[m
[32m+[m[32m        data_items_seen += len(data)[m[41m[m
[32m+[m[32m        running_sum += sum(data)[m[41m[m
[32m+[m[32m        print('The running average is {}'.format(running_sum / float(data_items_seen)))[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef produce(consumer):[m[41m[m
[32m+[m[32m    """产生序列集合，传递给消费函数（consumer）"""[m[41m[m
[32m+[m[32m    while True:[m[41m[m
[32m+[m[32m        data = get_data()[m[41m[m
[32m+[m[32m        print('Produced {}'.format(data))[m[41m[m
[32m+[m[32m        consumer.send(data)[m[41m[m
[32m+[m[32m        yield[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mif __name__ == '__main__':[m[41m[m
[32m+[m[32m    consumer = consume()[m[41m[m
[32m+[m[32m    consumer.send(None)[m[41m[m
[32m+[m[32m    producer = produce(consumer)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    for _ in range(10):[m[41m[m
[32m+[m[32m        print('Producing: ', _ + 1)[m[41m[m
[32m+[m[32m        next(producer)[m[41m[m
[1mdiff --git a/generator/generator_prime.py b/generator/generator_prime.py[m
[1mnew file mode 100644[m
[1mindex 0000000..d230b3e[m
[1m--- /dev/null[m
[1m+++ b/generator/generator_prime.py[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32mimport math[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef get_primes(number):[m[41m[m
[32m+[m[32m    while True:[m[41m[m
[32m+[m[32m        if is_prime(number):[m[41m[m
[32m+[m[32m            number = yield number[m[41m[m
[32m+[m[32m        number += 1[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef is_prime(number):[m[41m[m
[32m+[m[32m    if number > 1:[m[41m[m
[32m+[m[32m        if number == 2:[m[41m[m
[32m+[m[32m            return True[m[41m[m
[32m+[m[32m        if number % 2 == 0:[m[41m[m
[32m+[m[32m            return False[m[41m[m
[32m+[m[32m        for current in range(3, int(math.sqrt(number) + 1), 2):[m[41m[m
[32m+[m[32m            if number % current == 0:[m[41m[m
[32m+[m[32m                return False[m[41m[m
[32m+[m[32m        return True[m[41m[m
[32m+[m[32m    return False[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef print_successive_primes(iterations, base=10):[m[41m[m
[32m+[m[32m    prime_generator = get_primes(base)[m[41m[m
[32m+[m[32m    prime_generator.send(None)[m[41m[m
[32m+[m[32m    for power in range(iterations):[m[41m[m
[32m+[m[32m        print(prime_generator.send(base ** power))[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef get_primes2(n):[m[41m[m
[32m+[m[32m    p = 2[m[41m[m
[32m+[m[32m    count = 0[m[41m[m
[32m+[m[32m    while count < n:[m[41m[m
[32m+[m[32m        if is_prime(p):[m[41m[m
[32m+[m[32m            yield p[m[41m[m
[32m+[m[32m            count += 1[m[41m[m
[32m+[m[32m        p += 1[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mdef print_primes(n):[m[41m[m
[32m+[m[32m    prime_generator = get_primes2(n)[m[41m[m
[32m+[m[32m    t = [][m[41m[m
[32m+[m[32m    for p in prime_generator:[m[41m[m
[32m+[m[32m        t.append(p)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return t[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mif __name__ == '__main__':[m[41m[m
[32m+[m[32m    # print_successive_primes(6)[m[41m[m
[32m+[m[32m    import timeit[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    timeit.timeit(print_primes(10000))[m[41m[m
[1mdiff --git a/generator/yield_generator.py b/generator/yield_generator.py[m
[1mnew file mode 100644[m
[1mindex 0000000..da51bde[m
[1m--- /dev/null[m
[1m+++ b/generator/yield_generator.py[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32mdef yield_generator(n):[m[41m[m
[32m+[m[32m    l = range(n)[m[41m[m
[32m+[m[32m    for i in l:[m[41m[m
[32m+[m[32m        yield i * i[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mmygenerator = yield_generator(3)[m[41m[m
[32m+[m[32mprint(mygenerator)[m[41m[m
[32m+[m[32mfor i in mygenerator:[m[41m[m
[32m+[m[32m    print(i)[m[41m[m
[32m+[m[32m# >>> <generator object createGenerator at 0xb7555c34>[m[41m[m
[32m+[m[32m# >>> 0[m[41m[m
[32m+[m[32m#     1[m[41m[m
[32m+[m[32m#     4[m[41m[m
[1mdiff --git a/leetcode/binary_search.py b/leetcode/binary_search.py[m
[1mnew file mode 100644[m
[1mindex 0000000..9bb35db[m
[1m--- /dev/null[m
[1m+++ b/leetcode/binary_search.py[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m# binary_search.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef binary_search(a, key):[m
[32m+[m[32m    a.sort()[m
[32m+[m[32m    print(a)[m
[32m+[m[32m    l = 0[m
[32m+[m[32m    u = len(a) - 1[m
[32m+[m
[32m+[m[32m    while l < u:[m
[32m+[m[32m        mid = l + (u - l) // 2[m
[32m+[m[32m        if key < a[mid]:[m
[32m+[m[32m            u = mid + 1[m
[32m+[m[32m        elif key > a[mid]:[m
[32m+[m[32m            l = mid - 1[m
[32m+[m[32m        else:[m
[32m+[m[32m            return mid[m
[32m+[m
[32m+[m[32m    return[m
[32m+[m
[32m+[m[32mprint(binary_search([1, 5, 8, 3, 9], 3))[m
[1mdiff --git a/leetcode/count_bits.py b/leetcode/count_bits.py[m
[1mnew file mode 100644[m
[1mindex 0000000..7e09bfe[m
[1m--- /dev/null[m
[1m+++ b/leetcode/count_bits.py[m
[36m@@ -0,0 +1,51 @@[m
[32m+[m[32m"""Count Bits[m
[32m+[m
[32m+[m[32m> Given a non negative integer number `num`. For every numbers i in the[m
[32m+[m[32mrange `0 ≤ i ≤ num` calculate the number of 1's in their binary[m
[32m+[m[32mrepresentation and return them as an array.[m
[32m+[m
[32m+[m[32m- Example:[m
[32m+[m[32mFor `num = 5` you should return `[0,1,1,2,1,2]`.[m
[32m+[m
[32m+[m[32m- Follow up:[m
[32m+[m
[32m+[m[32m    - It is very easy to come up with a solution with run time O(n*sizeof(integer)).[m
[32m+[m[32m    But can you do it in linear time O(n) /possibly in a single pass?[m
[32m+[m[32m    - Space complexity should be O(n).[m
[32m+[m[32m    - Can you do it like a **boss**? Do it without using any *builtin* function[m
[32m+[m[32m    like `__builtin_popcount` in c++ or in any other language.[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef count_bits(num):[m
[32m+[m[32m    if num == 0:[m
[32m+[m[32m        return [0][m
[32m+[m[32m    if num == 1:[m
[32m+[m[32m        return [0, 1][m
[32m+[m
[32m+[m[32m    l = [0, 1][m
[32m+[m[32m    offset = 1[m
[32m+[m
[32m+[m[32m    for i in range(2, num + 1):[m
[32m+[m[32m        if offset * 2 == i:[m
[32m+[m[32m            offset *= 2[m
[32m+[m
[32m+[m[32m        l.append(1 + l[i - offset])[m
[32m+[m
[32m+[m[32m    return l[m
[32m+[m
[32m+[m
[32m+[m[32mdef count_ones(num):[m
[32m+[m[32m    count = 0[m
[32m+[m
[32m+[m[32m    while num:[m
[32m+[m[32m        count += 1[m
[32m+[m
[32m+[m[32m        num &= num - 1[m
[32m+[m[32m        # print(count, num)[m
[32m+[m[32m    return count[m
[32m+[m
[32m+[m
[32m+[m[32mprint(count_bits(10))[m
[32m+[m[32mcount_ones(100)[m
[1mdiff --git a/leetcode/count_ones.py b/leetcode/count_ones.py[m
[1mnew file mode 100644[m
[1mindex 0000000..22c9db8[m
[1m--- /dev/null[m
[1m+++ b/leetcode/count_ones.py[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32mdef count_ones_r(num):[m
[32m+[m[32m    if num < 2:[m
[32m+[m[32m        return num[m
[32m+[m[32m    print(num)[m
[32m+[m
[32m+[m[32m    return num % 2 + count_ones_r(num // 2)[m
[32m+[m
[32m+[m[32mprint("xx_x", count_ones_r(125))[m
[1mdiff --git a/leetcode/happy_num.py b/leetcode/happy_num.py[m
[1mnew file mode 100644[m
[1mindex 0000000..c25f4f0[m
[1m--- /dev/null[m
[1m+++ b/leetcode/happy_num.py[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mdef is_happy(n):[m
[32m+[m[32m    if n == 1:[m
[32m+[m[32m        return True[m
[32m+[m
[32m+[m[32m    if n <= 4:[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m[32m    sums = 0[m
[32m+[m
[32m+[m[32m    while n / 10 > 0:[m
[32m+[m[32m        sums += (n % 10) ** 2[m
[32m+[m[32m        n //= 10[m
[32m+[m
[32m+[m[32m    return is_happy(sums)[m
[32m+[m
[32m+[m
[32m+[m[32mprint(is_happy())[m
[1mdiff --git a/leetcode/insteadof_loop.py b/leetcode/insteadof_loop.py[m
[1mnew file mode 100644[m
[1mindex 0000000..dee4bb6[m
[1m--- /dev/null[m
[1m+++ b/leetcode/insteadof_loop.py[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32mdef print_without_loop(n):[m
[32m+[m[32m    print(n)[m
[32m+[m[32m    if n == 1000:[m
[32m+[m[32m        return[m
[32m+[m
[32m+[m[32m    return print_without_loop(n + 1)[m
[32m+[m
[32m+[m
[32m+[m[32mprint_without_loop(1)[m
\ No newline at end of file[m
[1mdiff --git a/leetcode/most_a.py b/leetcode/most_a.py[m
[1mnew file mode 100644[m
[1mindex 0000000..6164291[m
[1m--- /dev/null[m
[1m+++ b/leetcode/most_a.py[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m"""If you can type those keys:'a', 'c', 'v', 'Ctrl' for several times;[m
[32m+[m
[32m+[m[32m    Find a way to output the most number of 'a'.[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef most_a():[m
[32m+[m
[32m+[m[32m    for p in range(1, 100):[m
[32m+[m
[32m+[m[32m        max_a = {i: 2 ** int((p - i)/6) * i for i in range(1, p + 1)}[m
[32m+[m[32m        print(max_a)[m
[32m+[m
[32m+[m[32m    return max_a[m
[32m+[m
[32m+[m
[32m+[m[32mprint(most_a())[m
\ No newline at end of file[m
[1mdiff --git a/leetcode/move_0.py b/leetcode/move_0.py[m
[1mnew file mode 100644[m
[1mindex 0000000..92f4367[m
[1m--- /dev/null[m
[1m+++ b/leetcode/move_0.py[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mdef moveZeroes( nums):[m
[32m+[m[32m    """[m
[32m+[m[32m    :type nums: List[int][m
[32m+[m[32m    :rtype: void Do not return anything, modify nums in-place instead.[m
[32m+[m[32m    """[m
[32m+[m[32m    index = len(nums)[m
[32m+[m
[32m+[m[32m    count = 0[m
[32m+[m
[32m+[m[32m    for i in range(index):[m
[32m+[m
[32m+[m[32m        if nums[i] != 0:[m
[32m+[m[32m            nums.append(nums[i])[m
[32m+[m[32m            count += 1[m
[32m+[m
[32m+[m[32m    for j in range(index - count):[m
[32m+[m[32m        nums.append(0)[m
[32m+[m
[32m+[m[32m    return nums[m
[32m+[m
[32m+[m[32mprint(moveZeroes([0, 1, 2, 0, 3, 0]))[m
[1mdiff --git a/leetcode/nim_game.py b/leetcode/nim_game.py[m
[1mnew file mode 100644[m
[1mindex 0000000..c55b3d8[m
[1m--- /dev/null[m
[1m+++ b/leetcode/nim_game.py[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m"""Nim Game[m
[32m+[m
[32m+[m[32m> You are playing the following Nim Game with your friend:[m
[32m+[m[32mThere is a heap of stones on the table, each time one of you[m
[32m+[m[32mtake turns to remove 1 to 3 stones. The one who removes the[m
[32m+[m[32mlast stone will be the winner. You will take the first turn[m
[32m+[m[32mto remove the stones.[m
[32m+[m
[32m+[m[32m> Both of you are very clever and have optimal strategies for[m
[32m+[m[32mthe game. Write a function to determine whether you can win[m
[32m+[m[32mthe game given the number of stones in the heap.[m
[32m+[m
[32m+[m[32mFor example, if there are 4 stones in the heap, then you will[m
[32m+[m[32mnever win the game: no matter 1, 2, or 3 stones you remove,[m
[32m+[m[32mthe last stone will always be removed by your friend.[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef nim_game(n):[m
[32m+[m
[32m+[m[32m    if n < 4 or (n - 1) % 4 == 0 or (n - 2) % 4 == 0 or (n - 3) % 4 == 0:[m
[32m+[m[32m        return 'Win'[m
[32m+[m
[32m+[m[32m    return 'Loser'[m
[32m+[m
[1mdiff --git a/leetcode/reverse_vowels.py b/leetcode/reverse_vowels.py[m
[1mnew file mode 100644[m
[1mindex 0000000..2c2f917[m
[1m--- /dev/null[m
[1m+++ b/leetcode/reverse_vowels.py[m
[36m@@ -0,0 +1,39 @@[m
[32m+[m[32m"""LeetCode 345. Reverse Vowels of a String[m
[32m+[m
[32m+[m[32m> Write a function that takes a string as input and reverse only the vowels of a string.[m
[32m+[m
[32m+[m[32mExample 1:[m
[32m+[m
[32m+[m[32mGiven s = "hello", return "holle".[m
[32m+[m
[32m+[m[32mExample 2:[m
[32m+[m
[32m+[m[32mGiven s = "leetcode", return "leotcede".[m
[32m+[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef reverse_vowels(s):[m
[32m+[m[32m    VOWELS = ['a', 'e', 'i', 'o', 'u'][m
[32m+[m[32m    l, u = 0, len(s) - 1[m
[32m+[m[32m    sl = list(s.lower())[m
[32m+[m
[32m+[m[32m    while 1:[m
[32m+[m[32m        if l >= u:[m
[32m+[m[32m            break[m
[32m+[m
[32m+[m[32m        while sl[l] not in VOWELS and l < u:[m
[32m+[m[32m            l += 1[m
[32m+[m
[32m+[m[32m        while sl[u] not in VOWELS and l < u:[m
[32m+[m[32m            u -= 1[m
[32m+[m
[32m+[m[32m        sl[l], sl[u] = sl[u], sl[l][m
[32m+[m[32m        l, u = l + 1, u - 1[m
[32m+[m
[32m+[m[32m    return ''.join(sl)[m
[32m+[m
[32m+[m
[32m+[m[32mprint(reverse_vowels('aeiouaeiou'))[m
[32m+[m[32m# >>> uoieauoiea[m
[1mdiff --git a/leetcode/reverse_words.py b/leetcode/reverse_words.py[m
[1mnew file mode 100644[m
[1mindex 0000000..4d0ce50[m
[1m--- /dev/null[m
[1m+++ b/leetcode/reverse_words.py[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m"""## Reverse Words[m
[32m+[m
[32m+[m[32m> Given a sentence, reverse the words one by one, keeping the blank.[m
[32m+[m
[32m+[m[32mFor example:[m
[32m+[m
[32m+[m[32m`s = 'Hello Lroolle'`[m
[32m+[m
[32m+[m[32m return `olleH elloorL`[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef reverse_words(s):[m
[32m+[m[32m    return ' '.join(x[::-1] for x in s.split(' '))[m
[32m+[m
[32m+[m[32mprint(reverse_words('Hello     Lroolle'))[m
[1mdiff --git a/leetcode/single_number.py b/leetcode/single_number.py[m
[1mnew file mode 100644[m
[1mindex 0000000..166ac49[m
[1m--- /dev/null[m
[1m+++ b/leetcode/single_number.py[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mdef single_num2(nums):[m
[32m+[m
[32m+[m[32m    nums = sorted(nums)[m
[32m+[m
[32m+[m[32m    index = 0[m
[32m+[m
[32m+[m[32m    while index < len(nums) - 3:[m
[32m+[m[32m        if nums[index] != nums[index + 1]:[m
[32m+[m[32m            return nums[index][m
[32m+[m[32m        if nums[index] != nums[index + 3]:[m
[32m+[m[32m            return nums[index + 3][m
[32m+[m
[32m+[m[32m        index += 3[m
[32m+[m
[32m+[m[32m    return nums[index][m
[1mdiff --git a/leetcode/top_k_frequent_elements.py b/leetcode/top_k_frequent_elements.py[m
[1mnew file mode 100644[m
[1mindex 0000000..3d6a734[m
[1m--- /dev/null[m
[1m+++ b/leetcode/top_k_frequent_elements.py[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m"""LeetCode 347. Top K Frequent Elements[m
[32m+[m
[32m+[m[32m> Given a non-empty array of integers, return the k most frequent elements.[m
[32m+[m
[32m+[m[32mFor example,[m
[32m+[m[32mGiven [1,1,1,2,2,3] and k = 2, return [1,2].[m
[32m+[m
[32m+[m[32mNote:[m
[32m+[m
[32m+[m[32m- You may assume k is always valid, 1 ≤ k ≤ number of unique elements.[m
[32m+[m[32m- Your algorithm's time complexity must be better than O(n log n), where n is the array's size.[m
[32m+[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef top_k(nums, k):[m
[32m+[m[32m    d = dict()[m
[32m+[m
[32m+[m[32m    for s in set(nums):[m
[32m+[m[32m        d[s] = 0[m
[32m+[m
[32m+[m[32m    for x in nums:[m
[32m+[m[32m        d[x] += 1[m
[32m+[m
[32m+[m[32m    res = sorted(d, key=d.get, reverse=True)[m
[32m+[m
[32m+[m[32m    return res[:k][m
[32m+[m
[32m+[m
[32m+[m[32mprint(top_k([1, 1, 1, 2, 2, 3], 2))[m
[1mdiff --git a/leetcode/two_sum.py b/leetcode/two_sum.py[m
[1mnew file mode 100644[m
[1mindex 0000000..cab2ff0[m
[1m--- /dev/null[m
[1m+++ b/leetcode/two_sum.py[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32m"""Two Sum[m
[32m+[m
[32m+[m[32m# Two Sum[m
[32m+[m[32m> Given an array of integers, return indices of the two numbers[m
[32m+[m[32msuch that they add up to a specific target.[m
[32m+[m
[32m+[m[32m> You may assume that each input would have exactly one solution.[m
[32m+[m
[32m+[m[32m- Example:[m
[32m+[m
[32m+[m[32m    Given nums = [2, 7, 11, 15], target = 9,[m
[32m+[m
[32m+[m[32m    Because nums[0] + nums[1] = 2 + 7 = 9,[m
[32m+[m[32m    return [0, 1].[m
[32m+[m[32m    UPDATE (2016/2/13):[m
[32m+[m[32m    The return format had been changed to zero-based indices.[m
[32m+[m[32m    Please read the above updated description carefully.[m
[32m+[m[32m"""[m
[32m+[m
[32m+[m
[32m+[m[32mdef two_sum(a, target):[m
[32m+[m[32m    off = 0[m
[32m+[m[32m    while off < len(a):[m
[32m+[m
[32m+[m[32m        for i in range(off + 1, len(a)):[m
[32m+[m
[32m+[m[32m            if a[off] + a[i] == target:[m
[32m+[m[32m                return [off, i][m
[32m+[m
[32m+[m[32m        off += 1[m
[32m+[m
[32m+[m
[32m+[m[32mprint(two_sum([0, 1, 2, 3], 4))[m
[1mdiff --git a/metaclass/custom_metaclass.py b/metaclass/custom_metaclass.py[m
[1mnew file mode 100644[m
[1mindex 0000000..6436ef5[m
[1m--- /dev/null[m
[1m+++ b/metaclass/custom_metaclass.py[m
[36m@@ -0,0 +1,37 @@[m
[32m+[m[32m# the metaclass will automatically get passed the same argument[m[41m[m
[32m+[m[32m# that you usually pass to `type`[m[41m[m
[32m+[m[32mdef upper_attr(future_class_name, future_class_parents, future_class_attr):[m[41m[m
[32m+[m[32m    """[m[41m[m
[32m+[m[32m      Return a class object, with the list of its attribute turned[m[41m[m
[32m+[m[32m      into uppercase.[m[41m[m
[32m+[m[32m    """[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    # pick up any attribute that doesn't start with '__' and uppercase it[m[41m[m
[32m+[m[32m    uppercase_attr = {}[m[41m[m
[32m+[m[32m    for name, val in future_class_attr.items():[m[41m[m
[32m+[m[32m        if not name.startswith('__'):[m[41m[m
[32m+[m[32m            uppercase_attr[name.upper()] = val[m[41m[m
[32m+[m[32m        else:[m[41m[m
[32m+[m[32m            uppercase_attr[name] = val[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    # let `type` do the class creation[m[41m[m
[32m+[m[32m    return type(future_class_name, future_class_parents, uppercase_attr)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# __metaclass__ = upper_attr # this will affect all classes in the module[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass Foo(metaclass=upper_attr):  # global __metaclass__ won't work with "object" though[m[41m[m
[32m+[m[32m    # but we can define __metaclass__ here instead to affect only this class[m[41m[m
[32m+[m[32m    # and this will work with "object" children[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    bar = 'bip'[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint(hasattr(Foo, 'bar'))[m[41m[m
[32m+[m[32m# Out: False[m[41m[m
[32m+[m[32mprint(hasattr(Foo, 'BAR'))[m[41m[m
[32m+[m[32m# Out: True[m[41m[m
[32m+[m[41m[m
[32m+[m[32mf = Foo()[m[41m[m
[32m+[m[32mprint(f.BAR)[m[41m[m
[32m+[m[32m# Out: 'bip'[m[41m[m
[1mdiff --git a/metaclass/metaclass.py b/metaclass/metaclass.py[m
[1mnew file mode 100644[m
[1mindex 0000000..4e37683[m
[1m--- /dev/null[m
[1m+++ b/metaclass/metaclass.py[m
[36m@@ -0,0 +1,87 @@[m
[32m+[m[32mdef make_hook(f):[m[41m[m
[32m+[m[32m    """Decorator to turn 'foo' method into '__foo__'"""[m[41m[m
[32m+[m[32m    f.is_hook = 1[m[41m[m
[32m+[m[32m    return f[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass MyType(type):[m[41m[m
[32m+[m[32m    def __new__(cls, name, bases, attrs):[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        if name.startswith('None'):[m[41m[m
[32m+[m[32m            return None[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        # Go over attributes and see if they should be renamed.[m[41m[m
[32m+[m[32m        newattrs = {}[m[41m[m
[32m+[m[32m        for attrname, attrvalue in attrs.iteritems():[m[41m[m
[32m+[m[32m            if getattr(attrvalue, 'is_hook', 0):[m[41m[m
[32m+[m[32m                newattrs['__%s__' % attrname] = attrvalue[m[41m[m
[32m+[m[32m            else:[m[41m[m
[32m+[m[32m                newattrs[attrname] = attrvalue[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        return super(MyType, cls).__new__(cls, name, bases, newattrs)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def __init__(self, name, bases, attrs):[m[41m[m
[32m+[m[32m        super(MyType, self).__init__(name, bases, attrs)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        # classregistry.register(self, self.interfaces)[m[41m[m
[32m+[m[32m        print[m[41m[m
[32m+[m[32m        "Would register class %s now." % self[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def __add__(self, other):[m[41m[m
[32m+[m[32m        class AutoClass(self, other):[m[41m[m
[32m+[m[32m            pass[m[41m[m
[32m+[m[41m[m
[32m+[m[32m        return AutoClass[m[41m[m
[32m+[m[32m        # Alternatively, to autogenerate the classname as well as the class:[m[41m[m
[32m+[m[32m        # return type(self.__name__ + other.__name__, (self, other), {})[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def unregister(self):[m[41m[m
[32m+[m[32m        # classregistry.unregister(self)[m[41m[m
[32m+[m[32m        print[m[41m[m
[32m+[m[32m        "Would unregister class %s now." % self[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass MyObject:[m[41m[m
[32m+[m[32m    __metaclass__ = MyType[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass NoneSample(MyObject):[m[41m[m
[32m+[m[32m    pass[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Will print "NoneType None"[m[41m[m
[32m+[m[32mprint[m[41m[m
[32m+[m[32mtype(NoneSample), repr(NoneSample)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass Example(MyObject):[m[41m[m
[32m+[m[32m    def __init__(self, value):[m[41m[m
[32m+[m[32m        self.value = value[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    @make_hook[m[41m[m
[32m+[m[32m    def add(self, other):[m[41m[m
[32m+[m[32m        return self.__class__(self.value + other.value)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32m# Will unregister the class[m[41m[m
[32m+[m[32mExample.unregister()[m[41m[m
[32m+[m[41m[m
[32m+[m[32minst = Example(10)[m[41m[m
[32m+[m[32m# Will fail with an AttributeError[m[41m[m
[32m+[m[32m# inst.unregister()[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint[m[41m[m
[32m+[m[32minst + inst[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass Sibling(MyObject):[m[41m[m
[32m+[m[32m    pass[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mExampleSibling = Example + Sibling[m[41m[m
[32m+[m[32m# ExampleSibling is now a subclass of both Example and Sibling (with no[m[41m[m
[32m+[m[32m# content of its own) although it will believe it's called 'AutoClass'[m[41m[m
[32m+[m[32mprint[m[41m[m
[32m+[m[32mExampleSibling[m[41m[m
[32m+[m[32mprint[m[41m[m
[32m+[m[32mExampleSibling.__mro__[m[41m[m
[1mdiff --git a/metaclass/orderderclass.py b/metaclass/orderderclass.py[m
[1mnew file mode 100644[m
[1mindex 0000000..263670d[m
[1m--- /dev/null[m
[1m+++ b/metaclass/orderderclass.py[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32mimport collections[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass OrderedClass(type):[m[41m[m
[32m+[m[32m    @classmethod[m[41m[m
[32m+[m[32m    def __prepare__(metacls, name, bases, **kwds):[m[41m[m
[32m+[m[32m        return collections.OrderedDict()[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def __new__(cls, name, bases, namespace, **kwds):[m[41m[m
[32m+[m[32m        result = type.__new__(cls, name, bases, dict(namespace))[m[41m[m
[32m+[m[32m        result.members = tuple(namespace)[m[41m[m
[32m+[m[32m        return result[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mclass A(metaclass=OrderedClass):[m[41m[m
[32m+[m[32m    def one(self): print(1)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def two(self): print(2)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def three(self): print(3)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    def four(self): print(4)[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
[32m+[m[32mprint(A.members)[m[41m[m
[32m+[m[32m# ('__module__', '__qualname__', 'one', 'two', 'three', 'four')[m[41m[m
[1mdiff --git a/sorts/README.md b/sorts/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..6dd006f[m
[1m--- /dev/null[m
[1m+++ b/sorts/README.md[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m# Sorts Write in Python[m
[1mdiff --git a/sorts/bubble_sort.py b/sorts/bubble_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..6f47168[m
[1m--- /dev/null[m
[1m+++ b/sorts/bubble_sort.py[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m# bubble_sort.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef bubble_sort(a):[m
[32m+[m[32m    for i in range(len(a) - 1):[m
[32m+[m[32m        for j in range(1, len(a) - i):[m
[32m+[m[32m            if a[j - 1] > a[j]:[m
[32m+[m[32m                a[j - 1], a[j] = a[j], a[j - 1][m
[32m+[m
[32m+[m[32m    return a[m
[1mdiff --git a/sorts/heap_sort.py b/sorts/heap_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1c45122[m
[1m--- /dev/null[m
[1m+++ b/sorts/heap_sort.py[m
[36m@@ -0,0 +1,36 @@[m
[32m+[m[32m# heap_sort.py[m
[32m+[m[32m# Priority Queues[m
[32m+[m
[32m+[m
[32m+[m[32mdef sift_down(a, start, end):[m
[32m+[m[32m        """最大堆调整[m
[32m+[m
[32m+[m[32m        :param a: Array[m
[32m+[m[32m        :param start: Start point[m
[32m+[m[32m        :param end: End point[m
[32m+[m[32m        """[m
[32m+[m[32m        root = start[m
[32m+[m[32m        while 1:[m
[32m+[m[32m            child = 2 * root + 1[m
[32m+[m[32m            if child > end:[m
[32m+[m[32m                break[m
[32m+[m[32m            if child + 1 <= end and a[child] < a[child + 1]:[m
[32m+[m[32m                child += 1[m
[32m+[m[32m            if a[root] < a[child]:[m
[32m+[m[32m                a[root], a[child] = a[child], a[root][m
[32m+[m[32m                root = child[m
[32m+[m[32m            else:[m
[32m+[m[32m                break[m
[32m+[m
[32m+[m
[32m+[m[32mdef heap_sort(a):[m
[32m+[m[32m    # 创建最大堆[m
[32m+[m[32m    for start in range((len(a) - 2) // 2, -1, -1):[m
[32m+[m[32m        sift_down(a, start, len(a) - 1)[m
[32m+[m
[32m+[m[32m    # 堆排[m
[32m+[m[32m    for end in range(len(a) - 1, 0, -1):[m
[32m+[m[32m        a[0], a[end] = a[end], a[0][m
[32m+[m[32m        sift_down(a, 0, end - 1)[m
[32m+[m
[32m+[m[32m    return a[m
[1mdiff --git a/sorts/insertion_sort.py b/sorts/insertion_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..ba8bbc0[m
[1m--- /dev/null[m
[1m+++ b/sorts/insertion_sort.py[m
[36m@@ -0,0 +1,29 @@[m
[32m+[m[32m# insertion_sort.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef insertion_sort1(a):[m
[32m+[m[32m    for i in range(1, len(a)):[m
[32m+[m[32m        j = i[m
[32m+[m[32m        tmp = a[i][m
[32m+[m
[32m+[m[32m        while j > 0 and tmp < a[j - 1]:[m
[32m+[m[32m            a[j] = a[j - 1][m
[32m+[m[32m            j -= 1[m
[32m+[m
[32m+[m[32m        a[j] = tmp[m
[32m+[m
[32m+[m[32m    return a[m
[32m+[m
[32m+[m
[32m+[m[32m# enumerate[m
[32m+[m[32mdef insertion_sort2(a):[m
[32m+[m[32m    for i, item in enumerate(a):[m
[32m+[m[32m        j = i[m
[32m+[m
[32m+[m[32m        while j > 0 and item < a[j - 1]:[m
[32m+[m[32m            a[j] = a[j - 1][m
[32m+[m[32m            j -= 1[m
[32m+[m
[32m+[m[32m        a[j] = item[m
[32m+[m
[32m+[m[32m    return a[m
[1mdiff --git a/sorts/merge_sort.py b/sorts/merge_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..41d0195[m
[1m--- /dev/null[m
[1m+++ b/sorts/merge_sort.py[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32m# merge_sort.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef merge(left, right):[m
[32m+[m[32m    l, r = 0, 0[m
[32m+[m[32m    result = [][m
[32m+[m
[32m+[m[32m    while l < len(left) and r < len(right):[m
[32m+[m[32m        if left[l] < right[r]:[m
[32m+[m[32m            result.append(left[l])[m
[32m+[m[32m            l += 1[m
[32m+[m
[32m+[m[32m        else:[m
[32m+[m[32m            result.append(right[r])[m
[32m+[m[32m            r += 1[m
[32m+[m
[32m+[m[32m    result += left[l:][m
[32m+[m[32m    result += right[r:][m
[32m+[m
[32m+[m[32m    return result[m
[32m+[m
[32m+[m
[32m+[m[32mdef merge_sort(a):[m
[32m+[m[32m    if len(a) <= 1:[m
[32m+[m[32m        return a[m
[32m+[m
[32m+[m[32m    mid = len(a) >> 1[m
[32m+[m[32m    left = merge_sort(a[:mid])[m
[32m+[m[32m    right = merge_sort(a[mid:])[m
[32m+[m
[32m+[m[32m    return merge(left, right)[m
[1mdiff --git a/sorts/quick_sort.py b/sorts/quick_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..92adc9e[m
[1m--- /dev/null[m
[1m+++ b/sorts/quick_sort.py[m
[36m@@ -0,0 +1,105 @@[m
[32m+[m[32m# quick_sort.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef qsort1(a):[m
[32m+[m[32m    """Out-in-place quick sort[m
[32m+[m
[32m+[m[32m    :param a: unsorted array[m
[32m+[m[32m    :return: sorted[m
[32m+[m[32m    """[m
[32m+[m[32m    if len(a) <= 1:[m
[32m+[m[32m        return a[m
[32m+[m
[32m+[m[32m    return qsort1([x for x in a[1:] if x < a[0]]) + \[m
[32m+[m[32m            [a[0]] + \[m
[32m+[m[32m            qsort1([x for x in a[1:] if x >= a[0]])[m
[32m+[m
[32m+[m
[32m+[m[32mdef qsort2(a):[m
[32m+[m[32m    """Unofficial[m
[32m+[m
[32m+[m[32m    :param a: unsorted array[m
[32m+[m[32m    :return: a generator to generate sorted array[m
[32m+[m[32m    """[m
[32m+[m[32m    if not a:[m
[32m+[m[32m        return [][m
[32m+[m
[32m+[m[32m    elif len(a) == 1:[m
[32m+[m[32m        yield a[0][m
[32m+[m
[32m+[m[32m    else:[m
[32m+[m[32m        yield from qsort2([x for x in a if x < a[0]])[m
[32m+[m[32m        yield from [x for x in a if x == a[0]][m
[32m+[m[32m        yield from qsort2([x for x in a if x > a[0]])[m
[32m+[m
[32m+[m
[32m+[m[32mdef qsort3(a, l, u):[m
[32m+[m[32m    """In-place quick sort[m
[32m+[m[32m    One index for partition[m
[32m+[m
[32m+[m[32m    :param a: unsorted array[m
[32m+[m[32m    :param l: lower bound[m
[32m+[m[32m    :param u: upper bound[m
[32m+[m[32m    :return: None[m
[32m+[m[32m    """[m
[32m+[m[32m    if l >= u:[m
[32m+[m[32m        return[m
[32m+[m
[32m+[m[32m    m = l[m
[32m+[m
[32m+[m[32m    for i in range(l + 1, u + 1):[m
[32m+[m[32m        if a[i] < a[l]:[m
[32m+[m[32m            m += 1[m
[32m+[m[32m            a[m], a[i] = a[i], a[m][m
[32m+[m
[32m+[m[32m    a[m], a[l] = a[l], a[m][m
[32m+[m[32m    qsort3(a, l, m - 1)[m
[32m+[m[32m    qsort3(a, m + 1, u)[m
[32m+[m
[32m+[m
[32m+[m[32mdef qsort4(a, l, u):[m
[32m+[m[32m    """In-place quick sort[m
[32m+[m[32m    Two index for partition[m
[32m+[m
[32m+[m[32m    :param a: unsorted array[m
[32m+[m[32m    :param l: lower bound[m
[32m+[m[32m    :param u: upper bound[m
[32m+[m[32m    :return: None[m
[32m+[m[32m    """[m
[32m+[m[32m    if l >= u:[m
[32m+[m[32m        return[m
[32m+[m
[32m+[m[32m    pivot = a[l][m
[32m+[m[32m    left, right = l + 1, u[m
[32m+[m
[32m+[m[32m    while left <= right:[m
[32m+[m[32m        while left <= right and a[left] < pivot:[m
[32m+[m[32m            left += 1[m
[32m+[m[32m        while left <= right and a[right] >= pivot:[m
[32m+[m[32m            right -= 1[m
[32m+[m[32m        if left > right:[m
[32m+[m[32m            break[m
[32m+[m
[32m+[m[32m        a[left], a[right] = a[right], a[left][m
[32m+[m
[32m+[m[32m    a[l], a[right] = a[right], a[l][m
[32m+[m[32m    qsort4(a, l, left - 1)[m
[32m+[m[32m    qsort4(a, right + 1, u)[m
[32m+[m
[32m+[m[32m# def test(seq, n):[m
[32m+[m[32m#     it = iter(seq)[m
[32m+[m[32m#     return [next(it, None) for _ in range(n)][m
[32m+[m
[32m+[m[32m# print(qsort2([2, 1, 3, 5], 0, 3))[m
[32m+[m
[32m+[m
[32m+[m[32m# if __name__ == '__main__':[m
[32m+[m[32m# for i in qsort1([8, 1, 3, 4, 56, 7, 8, 5, 5, 76]):[m
[32m+[m[32m#     print(i)[m
[32m+[m
[32m+[m[32m#[m
[32m+[m[32m# import random[m
[32m+[m[32m# array = [random.randint(0, 10) for _ in range(10)][m
[32m+[m[32m# print('---', array, '---')[m
[32m+[m[32m# qsort3(array, 0, len(array) - 1)[m
[32m+[m[32m# print(array)[m
[1mdiff --git a/sorts/selection_sort.py b/sorts/selection_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..6f7c239[m
[1m--- /dev/null[m
[1m+++ b/sorts/selection_sort.py[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32m# selection_sort.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef selection_sort(a):[m
[32m+[m[32m    for i in range(len(a)):[m
[32m+[m[32m        min = i[m
[32m+[m
[32m+[m[32m        for j in range(i + 1, len(a)):[m
[32m+[m[32m            if a[min] > a[j]:[m
[32m+[m[32m                min = j[m
[32m+[m
[32m+[m[32m        a[min], a[i] = a[i], a[min][m
[32m+[m
[32m+[m[32m    return a[m
[1mdiff --git a/sorts/shell_sort.py b/sorts/shell_sort.py[m
[1mnew file mode 100644[m
[1mindex 0000000..d13b37b[m
[1m--- /dev/null[m
[1m+++ b/sorts/shell_sort.py[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m# shell_sort.py[m
[32m+[m
[32m+[m
[32m+[m[32mdef shell_sort(a):[m
[32m+[m[32m    gap = len(a)[m
[32m+[m
[32m+[m[32m    # gap = gap // 2[m
[32m+[m[32m    while gap > 0:[m
[32m+[m[32m        gap >>= 1[m
[32m+[m
[32m+[m[32m        for i in range(gap, len(a)):[m
[32m+[m[32m            j = i[m
[32m+[m[32m            tmp = a[i][m
[32m+[m
[32m+[m[32m            while j >= gap and tmp < a[j - gap]:[m
[32m+[m[32m                a[j] = a[j - gap][m
[32m+[m[32m                j -= gap[m
[32m+[m
[32m+[m[32m            a[j] = tmp[m
[32m+[m
[32m+[m[32m    return a[m
[1mdiff --git a/sorts/test.py b/sorts/test.py[m
[1mnew file mode 100644[m
[1mindex 0000000..3b